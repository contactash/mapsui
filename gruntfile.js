module.exports = function (grunt) {

    grunt.file.write(
        'tests/unit/global.js',
        '// This is loaded into the PhantomJs browser - do not edit - this is auto-generated by Gruntfile.js \nvar __dirname = \'' + __dirname + '\';\nvar __dirnameglobal = \'' + __dirname + '\';'
    );

    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        jshint: {
            files: [
                'application/scripts/**/*.js',
                'tests/**/*Spec.js'
            ]
        },
        connect: {
            options: {
                port: 8088,
                base: 'application/'
            },
            server: {
                options: {
                    livereload: true,
                    background: true
                }
            },
            devServer: {
                options: {
                    livereload: false,
                    background: false,
                    keepalive: true
                }
            },
            testServer: {
                options: {
                    port: 9999,
                    livereload: true,
                    background: true
                }
            },
            testEnvServer: {
                options: {
                    port: 9080,
                    livereload: false,
                    background: false,
                    keepalive: true
                }
            },
            testLive: {
                options: {
                    port: 9999,
                    keepalive: true
                }
            },
            prodServer: {
                options: {
                    livereload: false,
                    background: false,
                    keepalive: true
                }
            }
        },
        protractor: {
            options: {
                configFile: 'protractor.conf.js',
                noColor: false,
                // debug: true,
                args: {
                }
            },
            e2e: {
                options: {
                    // Stops Grunt process if a test fails
                    keepAlive: false
                }
            },
            continuous: {
                options: {
                    keepAlive: true
                }
            }
        },
        clean: {
            all: {
                src: [
                    'application/scripts/bundle.js',
                    'application/scripts/services/config/config.js',
                    'application/styles/bundle.css'
                ]
            }
        },
        copy: {
            devConfig: {
                files: [{
                    expand: true,
                    dot: true,
                    cwd: 'application/scripts/services/config',
                    dest: 'application/scripts/services/config',
                    src: ['config-dev.js'],
                    rename: function (dest) {
                        return dest + '/config.js';
                    }
                }]
            },citConfig: {
                files: [{
                    expand: true,
                    dot: true,
                    cwd: 'application/scripts/services/config',
                    dest: 'application/scripts/services/config',
                    src: ['config-cit.js'],
                    rename: function (dest) {
                        return dest + '/config.js';
                    }
                }]
            },istConfig: {
                files: [{
                    expand: true,
                    dot: true,
                    cwd: 'application/scripts/services/config',
                    dest: 'application/scripts/services/config',
                    src: ['config-ist.js'],
                    rename: function (dest) {
                        return dest + '/config.js';
                    }
                }]
            },
            prodConfig: {
                files: [{
                    expand: true,
                    dot: true,
                    cwd: 'application/scripts/services/config',
                    dest: 'application/scripts/services/config',
                    src: ['config-prod.js'],
                    rename: function (dest) {
                        return dest + '/config.js';
                    }
                }]
            }
        },
        sass: {
            dist: {                      // Target
                options: {               // Target options
                    style: 'expanded'
                },
                files: {                 // Dictionary of files
                    'application/styles/gov-uk/application.css': 'application/styles/gov-uk/application.scss'   // 'destination': 'source'
                }
            }
        },
        uglify: {
            options: {
                banner: '/*! DWP (TechLab/DAT) \n<%= pkg.name %> - v<%= pkg.version %>\n' + '<%= grunt.template.today("yyyy-mm-dd") %> */ ',
                screwIE8: true,
                mangle: false
            },
            my_target: {
                files: {
                    'application/scripts/bundle.js': ['application/scripts/bundle.js']
                }
            }
        },
        browserify: {
            bundle: {
                files: {
                    'application/scripts/bundle.js': [
                        'application/bower_components/jquery/dist/jquery.min.js',
                        'application/bower_components/angular/angular.js',
                        'application/bower_components/angular-aria/angular-aria.js',
                        'application/bower_components/angular-bootstrap/ui-bootstrap-tpls.js',
                        'application/bower_components/angular-animate/angular-animate.js',
                        'application/bower_components/angular-route/angular-route.js',
                        'application/bower_components/angular-route-segment/build/angular-route-segment.js',
                        '../node_modules/jstoxml/jstoxml.js',
                        'application/scripts/**/*.js',
                        'application/scripts/**/*.json',
                        '!appliction/scripts/Promise',
                        '!appliction/scripts/signalling',
                        'application/bower_components/moment/moment.js'
                    ]
                },
                options: {
                    exclude: ['application/scripts/bundle.js'],
                    watch: false,
                    banner: '/*\nDWP - MapsUI\n*/',
                    browserifyOptions: {
                        debug: true,
                        basedir: 'application/'
                    },
                    alias: {
                        'angular': './bower_components/angular/angular.js',
                        'angular-bootstrap': './bower_components/angular-bootstrap/ui-bootstrap-tpls.js',
                        'signalling': './scripts/signalling.js',
                        'ip': './scripts/services/ip.js',
                        'lodash': './bower_components/lodash/lodash.js',
                        'angular-route': './bower_components/angular-route/angular-route.js',
                        'angular-route-segment': './bower_components/angular-route-segment/build/angular-route-segment.js',
                        'moment': './bower_components/moment/moment.js'
                    }
                }
            }
        },
        karma: {
            unit: {
                configFile: 'tests/unit/karma.conf.js'
            }
        },
        watch: {
            scripts: {
                files: [
                    'application/scripts/**/*.js',
                    'application/scripts/**/*.json',
                    'application/scripts/**/*.scss',
                    'application/**/*.html',
                    '!application/scripts/bundle.js'
                ],
                tasks: ['watch-build'],
                options: {
                    spawn: false,
                    interrupt: false,
                    debounceDelay: 250,
                    livereload: true,
                    event: ['changed', 'deleted']
                }
            }
        },
        browserSync: {
            bsFiles: {
                src : [
                    'application/scripts/**/*.js',
                    'application/scripts/**/*.scss',
                    'application/**/*.html',
                    '!application/scripts/bundle.js'
                ]
            },
            options: {
                server: {
                    baseDir: "./application"
                }
            }
        },
        test: {
            files: ['tests/**/*Spec.js'],
            tasks: ['test'],
            options: {
                spawn: false,
                interrupt: true,
                debounceDelay: 250
            }
        }, concat: {
            options: {
                separator: '; /*DELIMIT*/'
            },
            application: {
                src: [
                    'application/bower_components/jquery/dist/jquery.js',
                    'application/scripts/Promise.js',
                    'application/scripts/signalling.js',
                    'application/scripts/bundle.js'
                ],
                dest: 'application/scripts/bundle.js'
            },
            css: {
                src: [
                    'application/styles/gov-uk/fonts.css',
                    'application/styles/gov-uk/application.css',
                    'application/styles/app.css',
                    'bower_components/bootstrap/dist/css/bootstrap.min.css'
                ],
                dest: 'application/styles/bundle.css'
            }
        },
        cssmin: {
            options: {
                shorthandCompacting: false,
                roundingPrecision: -1
            },
            target: {
                files: {
                    'application/styles/bundle.css': ['application/styles/bundle.css']
                }
            }
        }
    });

    grunt.loadNpmTasks('grunt-protractor-runner');
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-connect');
    grunt.loadNpmTasks('grunt-contrib-sass');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-browserify');
    grunt.loadNpmTasks('grunt-contrib-jshint');
    grunt.loadNpmTasks('grunt-karma');
    grunt.loadNpmTasks('grunt-browser-sync');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-concat');
    grunt.loadNpmTasks('grunt-contrib-cssmin');

    grunt.registerTask('updateVersion', 'Updating Version in HTML', function () {
        var destFilePath = 'application/views/footer.html', data;

        if (grunt.file.exists(destFilePath)) {
            data = grunt.file.read(destFilePath);
            var result = data.replace(/\<build\>.*?\<\/build\>/ig, '<build>' + (new Date()).toUTCString() + '</build>');
            grunt.file.write(destFilePath, result);
        }
    });

    grunt.registerTask('banner', 'Generate Banner', function () {
        grunt.log.ok('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n                    $$$$$$$\\  $$\\      $$\\ $$$$$$$\\\n                    $$  __$$\\ $$ | $\\  $$ |$$  __$$\\\n                    $$ |  $$ |$$ |$$$\\ $$ |$$ |  $$ |\n                    $$ |  $$ |$$ $$ $$\\$$ |$$$$$$$  |\n                    $$ |  $$ |$$$$  _$$$$ |$$  ____/\n                    $$ |  $$ |$$$  / \\$$$ |$$ |\n                    $$$$$$$  |$$  /   \\$$ |$$ |\n                    \\_______/ \\__/     \\__|\\__|\n\n      grunt test                : runs ALL test suites\n      grunt test-unit           : runs the unit tests\n      grunt test-system         : runs the system tests\n      grunt dev-build (default) : dev build\n      grunt dev-serve           : build and serve (use CTRL+C to exit)\n      grunt dev-watch           : build, serve and watch for changes\n      grunt prod-build          : production build\n\nnb: dev-serve listens on http://localhost:8088/\nnb: test-server listens on http://localhost:9999/\nnb: protractor listens on http://localhost:4444/\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -');
    });

    //Start this to run the e2e test from Intellij
    grunt.registerTask('test-live', ['connect:testLive']);

    grunt.registerTask('test-serve', ['connect:testServer']);

    //Run "grunt dev-serve" before running below three test tasks
    //test runs all unit and e2e tests, unit-test runs only unit tests and e2e tests
    //runs only e2e tests.
    grunt.registerTask('test', ['karma:unit:start', 'test-serve',  'protractor:e2e']);
    grunt.registerTask('unit-test', ['karma:unit:start']);
    grunt.registerTask('e2e-test', ['test-serve', 'protractor:e2e']);

    grunt.registerTask('common-concat', ['concat:application', 'concat:css']);

    grunt.registerTask('prod-min', [ 'sass', 'browserify', 'common-concat', 'cssmin','uglify', 'updateVersion']);
    grunt.registerTask('prod-build', ['banner', 'clean:all', 'copy:prodConfig', 'prod-min']);
    grunt.registerTask('prod-serve', ['prod-build', 'connect:prodServer']);

    grunt.registerTask('dev-build', ['banner', 'clean:all', 'copy:devConfig', 'test-build']);
    grunt.registerTask('dev-serve', ['dev-build', 'connect:devServer']);

    grunt.registerTask('watch-build', ['banner', 'clean:all',  'copy:devConfig', 'sass', 'browserify','common-concat', 'cssmin']);

    grunt.registerTask('test-build',['sass', 'browserify', 'common-concat', 'cssmin', 'updateVersion']);
    grunt.registerTask('test-cit-build', ['banner', 'clean:all', 'copy:citConfig', 'test-build']);
    grunt.registerTask('test-cit-serve', ['test-cit-build', 'connect:testEnvServer']);

    grunt.registerTask('test-ist-build', ['banner', 'clean:all', 'copy:istConfig', 'test-build']);
    grunt.registerTask('test-ist-serve', ['test-ist-build', 'connect:testEnvServer']);

    grunt.registerTask('default', ['dev-build']);
    grunt.registerTask('live', ['browserSync', 'watch']);
};

